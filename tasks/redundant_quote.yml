---

- name: "[REDUNDANT QUOTE] check for redundant quote"
  find:
    paths: "{{ fix_directories }}"
    contains: |
      ^((?!(when)).)*: (\"|')((?!(\{\{|\}\}|\\|\[|])).)*(\"|').*$
    patterns: "{{ files_pattern }}"
    recurse: true
    use_regex: "{{ use_regex }}"
  register: _result
  failed_when: _result.matched > 0
  ignore_errors: true

- name: "[REDUNDANT QUOTE] erase for redundant quote"
  replace:
    path: "{{ item.path }}"
    regexp: |
      ^(((?!(when)).)*: )(\"|')(((?!(\{\{|\}\}|\\|\[|])).)*)(\"|')$
    replace: '\1\3'
  loop: "{{ _result.files }}"
  when: _result.failed

- name: "[REDUNDANT QUOTE] check for redundant quote"
  find:
    paths: "{{ fix_directories }}"
    contains: |
      ^((?!(when)).)*: (\"|')((?!(\{\{|\}\}|\\|]|\[)).)*(\"|').*$
    patterns: "{{ files_pattern }}"
    recurse: true
    use_regex: "{{ use_regex }}"
  register: _result
  failed_when: _result.matched > 0
  ignore_errors: true


- name: "[REDUNDANT QUOTE] check for quotes between regex"
  find:
    paths: "{{ fix_directories }}"
    contains: |
      ^((?!(when)).)*: '\^((?!(\{\{|\}\}|]|\[)).)*\$'$
    patterns: "{{ files_pattern }}"
    recurse: true
    use_regex: "{{ use_regex }}"
  register: _result1
  failed_when: _result1.matched > 0
  ignore_errors: true

- name: "[REDUNDANT QUOTE] erase for redundant quote"
  replace:
    path: "{{ item.path }}"
    regexp: |
      ^(((?!(when)).)*: )'(\^((?!(\{\{|\}\}|\[|])).)*\$)'$
    replace: '\1\2'
  loop: "{{ _result1.files }}"
  when: _result1.failed

- name: "[REDUNDANT QUOTE] check for quotes between regex"
  find:
    paths: "{{ fix_directories }}"
    contains: |
      ^((?!(when)).)*: '\^((?!(\{\{|\}\}|]|\[)).)*\$'$
    patterns: "{{ files_pattern }}"
    recurse: true
    use_regex: "{{ use_regex }}"
  register: _result1
  failed_when: _result1.matched > 0
  ignore_errors: true